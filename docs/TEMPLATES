# Information on creating templates for oak

This file contains the necessary information for designing templates for
the oak blogging system..

## Templating system

oak uses [Jinja2](http://jinja.pocoo.org) for processing templates. You can 
read the [excellent documentation](http://jinja.pocoo.org/2/documentation) 
provided by the Jinja developers.

## Directory structure

Template files are stored in the `layouts` directory. The files composing a
template are stored inside another directory named after the template name.
For example, the `default` template files are stored at `layouts/default`.

## Files

If you take a look at the `default` template directory you'll find the 
following files:

* base.jinja
* index.jinja
* post.jinja
* tag.jinja
* tags.jinja

As you can see, the template files have the .jinja extension.

You can as well create static content specific to your template, you 
must save it at `layouts/yourlayout/static`. You can create as many
directories as you want inside it. For example you may have one for
CSS, another one for images, and so on.

## Data available on templates

An important thing on designing templates is to know which data is 
available in the template.

This data is not always the same, it depends on the type of content
which is going to be processed: a post, the front page, ...

It will always be a python dict, here we show you what this dict contains
depending on which content is going to be processed. There are a few keys
which are available whatever content is going to be processed, and other
keys which are only available to some types of content.

### All type of content

    {
      'blog_title': settings.BLOG_TITLE,
      'links': {
        'site': settings.PREFIX or '/',
        'authors': url(settings.HTMLS['authors']),
        'archive': url(settings.HTMLS['archive']),
        'taglist': url(settings.HTMLS['taglist']),
      }
    }

### Post

    {
      'post': <Post object>
    }

### Front page

    {
      'posts': [<Post object>, ...]
    }

### Tag

    {
      'tag': <Tag object>,
    }

### Tags list

    {
      'tags': { 'tagname': <Tag object>, ...},
    }

Remember that `Post` and `Tag` objects are classic Python `dict` objects, we've
just sublcassed `dict` for creating them.

## The contents of Post and Tag

Here we describe the contents of these objects.

### Post

    {
      'raw': 'markdown string read from the file',
      'html': 'the processed markdown',
      'metadata': {'metadata': 'foo', 'metadata2': 'bar', ...},
      'url': 'http://example.com/blog/post/file.html',
    }

### Tag

    {
        'tag': 'The_tag_itself',
        'url': 'http://example.com/tags/tag.html',
        'posts': [<Post object>, ...],
    }
    
### The metadata in a Post object

The metadata has no fixed content, the contents of the post header are
parsed and added to the metadata, so you can find some unusual content
here. Nevertheless, you'll always find the following contents:

    {
      'title': 'Post title',
      'author': 'Defaults to settings.AUTHOR',
      'layout': 'Not used now',
      'tags': ['tag1', 'tag2', ...],
    }

This contents are set by default in `settings.py`, you can always check
there which keys will always be available in the metadata.

